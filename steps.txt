

 - Classes do Identy adicionadas. 
 - Classes 
    - Usuario
    - Nivel de acesso
    - Classe relaciona Usuario e NivelAcesso
    - faltando classes de niveis de accesso completos
    
    - Alteracao de classe evento;
    - 

    MAPPING -> EVENTO OK 
            -> REALIZADOR
            -> PATROCINADOR 
            -> PATROCINADOREVENTO
            -> EVENTO-PATROCINADOR
                

    dotnet-aspnet-codegenerator controller -name CategoriaController -m Categoria -dc viewmodeldbcontexto -uld -outDir Controllers -scripts



   
   <div class="row">
    <div class="col-md-4">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Nome" class="control-label"></label>
                <input asp-for="Nome" class="form-control" />
                <span asp-validation-for="Nome" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Foto" class="control-label"></label>
                <input asp-for="Foto" type="file" id="foto" name="foto" class="form-control" />
                <span asp-validation-for="Foto" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>


   public async Task<IActionResult> Create([Bind("PessoaId,Nome,Foto")] Pessoa pessoa, IFormFile foto)
        {
            if (ModelState.IsValid)
            {

                var pathFoto = Path.Combine(_environment.WebRootPath, "Imagens");

                if (foto != null)
                {
                    using (FileStream fs = new FileStream(Path.Combine(pathFoto, foto.FileName), FileMode.Create))
                    {
                        await foto.CopyToAsync(fs);
                        pessoa.Foto = "~/Imagens/" + foto.FileName;
                    }
                }

                _context.Add(pessoa);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(pessoa);
        }



            <td>
                @Html.DisplayFor(modelItem => item.Nome)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Foto)
            </td>

            <td>
               <img src="@Url.Content(item.Foto)" width="200" height="200" />
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.PessoaId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item
